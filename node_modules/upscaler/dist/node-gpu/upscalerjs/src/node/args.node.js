"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getUpscaleOptions = void 0;
var getOutputOption = function (output) {
    if (output === 'base64') {
        return 'base64';
    }
    return 'tensor';
};
var getUpscaleOptions = function (_a) {
    if (_a === void 0) { _a = {}; }
    var output = _a.output, progressOutput = _a.progressOutput, options = __rest(_a, ["output", "progressOutput"]);
    return __assign(__assign({}, options), { output: getOutputOption(output), progressOutput: getOutputOption(progressOutput || output) });
};
exports.getUpscaleOptions = getUpscaleOptions;
