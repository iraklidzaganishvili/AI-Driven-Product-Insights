import type { Tensor3D, Tensor4D } from '@tensorflow/tfjs-core';
import type { LayersModel, layers } from '@tensorflow/tfjs-layers';
import type { TF, GraphModel, ModelDefinitionObjectOrFn, ModelDefinition } from '../../../shared/src/types';
export type { ProcessFn, } from '../../../shared/src/types';
export type WarmupSizesByPatchSize = {
    patchSize: number;
    padding?: number;
};
export type NumericWarmupSizes = number;
export interface UpscalerOptions {
    model?: ModelDefinitionObjectOrFn;
    warmupSizes?: WarmupSizes;
}
export type WarmupSizes = NumericWarmupSizes | WarmupSizesByPatchSize | (NumericWarmupSizes | WarmupSizesByPatchSize)[];
export type ParsedModelDefinition = ModelDefinition;
export type BASE64 = 'base64';
export type TENSOR = 'tensor';
export type ResultFormat = BASE64 | TENSOR | undefined;
export interface SliceData {
    row: number;
    col: number;
    patchCoordinates: {
        pre: PatchCoordinates;
        post: PatchCoordinates;
    };
}
export type MultiArgStringProgress = (amount: number, slice: string, sliceData: SliceData) => void;
export type MultiArgTensorProgress = (amount: number, slice: Tensor3D, sliceData: SliceData) => void;
export type SingleArgProgress = (amount: number) => void;
export type Progress = SingleArgProgress | MultiArgStringProgress | MultiArgTensorProgress;
interface SharedArgs {
    signal?: AbortSignal;
    awaitNextFrame?: boolean;
}
export interface UpscaleArgs extends SharedArgs {
    output?: BASE64 | TENSOR;
    patchSize?: number;
    padding?: number;
    progress?: Progress;
    progressOutput?: BASE64 | TENSOR;
}
export interface PrivateUpscaleArgs extends Omit<UpscaleArgs, 'output' | 'progressOutput'> {
    output: BASE64 | TENSOR;
    progressOutput: BASE64 | TENSOR;
}
export type Layer = layers.Layer;
export interface ModelPackage {
    model: LayersModel | GraphModel;
    modelDefinition: ParsedModelDefinition;
}
export type YieldedIntermediaryValue = undefined | Tensor4D | Tensor3D | Array<Tensor3D | Tensor4D | undefined>;
export interface WarmupArgs extends SharedArgs {
}
export type CheckValidEnvironment<I> = (input: I, opts: {
    output?: ResultFormat;
    progressOutput?: ResultFormat;
}) => void;
export type GetImageAsTensor<T extends TF, I> = (tf: T, input: I) => Promise<Tensor4D>;
export type TensorAsBase64<T extends TF> = (tf: T, tensor: Tensor3D) => string;
export type LoadModel<T extends TF> = (tf: T, _modelDefinition: Promise<ModelDefinition>) => Promise<ModelPackage>;
export type GetUpscaleOptions = (args?: Omit<UpscaleArgs, 'output' | 'progressOutput'> & {
    output?: unknown;
    progressOutput?: unknown;
}) => PrivateUpscaleArgs;
export type Coordinate = [number, number];
export type PatchCoordinates = {
    origin: Coordinate;
    size: Coordinate;
};
export type Patch = {
    pre: PatchCoordinates;
    post: PatchCoordinates;
};
export interface Internals<T extends TF, Input> extends InternalConfig<T, Input> {
    tf: T;
    getUpscaleOptions: GetUpscaleOptions;
    loadModel: LoadModel<T>;
}
export interface InternalConfig<T extends TF, I> {
    checkValidEnvironment: CheckValidEnvironment<I>;
    getImageAsTensor: GetImageAsTensor<T, I>;
    tensorAsBase64: TensorAsBase64<T>;
}
//# sourceMappingURL=types.d.ts.map