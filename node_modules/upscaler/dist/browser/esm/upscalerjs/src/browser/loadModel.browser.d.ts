import type { LayersModel } from '@tensorflow/tfjs-layers';
import type { ModelType, ModelConfigurationInternals, GraphModel } from '../../../shared/src/types';
import type { LoadModel, ParsedModelDefinition } from '../shared/types';
import type { TF } from '../../../shared/src/types';
type CDN = 'jsdelivr' | 'unpkg';
type CdnFn = (packageName: string, version: string, path: string) => string;
type Errors = [CDN, Error][];
export declare const CDN_PATH_DEFINITIONS: {
    [key in CDN]: CdnFn;
};
export declare const CDNS: CDN[];
export declare const getLoadModelErrorMessage: (errs: Errors, modelPath: string, internals: ModelConfigurationInternals) => Error;
export declare function fetchModel<M extends ModelType, R = M extends 'graph' ? GraphModel : LayersModel>(tf: TF, modelConfiguration: {
    modelType?: M;
} & Omit<ParsedModelDefinition, 'modelType'>): Promise<R>;
export declare const loadModel: LoadModel<TF>;
export {};
//# sourceMappingURL=loadModel.browser.d.ts.map