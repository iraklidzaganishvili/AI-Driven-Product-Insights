import { Tensor, Tensor3D, Tensor4D } from '@tensorflow/tfjs-core';
import type { Range, Shape4D, FixedShape4D, TF } from '../../../shared/src/types';
import { Coordinate } from './types';
export declare const padInput: (tf: TF, inputShape: Shape4D) => (pixels: Tensor4D) => Tensor4D;
export declare const trimInput: (tf: TF, imageSize: FixedShape4D, scale: number) => (pixels: Tensor4D) => Tensor4D;
export declare const scaleOutput: (range?: Range) => (pixels: Tensor4D) => Tensor4D;
export declare const getWidthAndHeight: (tensor: Tensor) => Coordinate;
export declare const scaleIncomingPixels: (tf: TF, range?: Range) => (tensor: Tensor4D) => Tensor4D;
export declare const tensorAsClampedArray: (tf: TF, tensor: Tensor3D) => Uint8Array | Float32Array | Int32Array;
export declare function getCopyOfInput<T>(input: T): T;
export declare function concatTensors<T extends Tensor3D | Tensor4D>(tf: TF, tensors: Array<T | undefined>, axis?: number): T;
//# sourceMappingURL=tensor-utils.d.ts.map