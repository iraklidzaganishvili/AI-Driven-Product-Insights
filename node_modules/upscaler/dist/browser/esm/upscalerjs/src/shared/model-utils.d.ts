import type { LayersModel } from '@tensorflow/tfjs-layers';
import type { ModelDefinition, ModelDefinitionFn, ModelDefinitionObjectOrFn, Shape4D, ModelType, FixedShape4D, TF, GraphModel } from '../../../shared/src/types';
import type { ModelPackage, ParsedModelDefinition, UpscaleArgs } from './types';
export declare const parseModelDefinition: ParseModelDefinition;
export type ParseModelDefinition = (m: ModelDefinition) => ParsedModelDefinition;
export declare function isModelDefinitionFn(modelDefinition: ModelDefinitionObjectOrFn): modelDefinition is ModelDefinitionFn;
export declare function getModelDefinitionOrModelDefinitionFnAsModelDefinition(tf: TF, modelDefinition: ModelDefinitionObjectOrFn): ModelDefinition;
export declare function getModel(tf: TF, modelDefinition: ModelDefinitionObjectOrFn): Promise<ModelDefinition>;
export declare function loadTfModel<M extends ModelType, R = Promise<M extends 'graph' ? GraphModel : LayersModel>>(tf: TF, modelPath: string, modelType?: M): R;
export declare const getModelInputShape: (tf: TF, { model, }: ModelPackage) => Shape4D;
export declare const getPatchSizeAsMultiple: (divisibilityFactor: number, patchSize: number) => number;
type ParsePatchAndInputShapes = (tf: TF, modelPackage: ModelPackage, args: UpscaleArgs, imageSize: FixedShape4D) => {
    modelInputShape?: Shape4D;
} & Pick<UpscaleArgs, 'patchSize' | 'padding'>;
export declare const parsePatchAndInputShapes: ParsePatchAndInputShapes;
export {};
//# sourceMappingURL=model-utils.d.ts.map