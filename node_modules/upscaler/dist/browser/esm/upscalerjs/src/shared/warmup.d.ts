import type { TF } from '../../../shared/src/types';
import type { ModelPackage, NumericWarmupSizes, WarmupArgs, WarmupSizes, WarmupSizesByPatchSize, YieldedIntermediaryValue } from './types';
export declare const isWarmupSizeByPatchSize: (size: unknown) => size is WarmupSizesByPatchSize;
export declare const isNumericWarmupSize: (size: unknown) => size is number;
export declare const ERROR_INVALID_WARMUP_VALUE: (size: unknown) => string;
export declare const getInvalidValueError: (size: unknown) => Error;
export declare function warmup(tf: TF, modelPackage: Promise<ModelPackage>, sizes: (NumericWarmupSizes | WarmupSizesByPatchSize)[]): AsyncGenerator<YieldedIntermediaryValue>;
export declare const getSizesAsArray: (sizes: WarmupSizes) => (NumericWarmupSizes | WarmupSizesByPatchSize)[];
export declare const cancellableWarmup: (tf: TF, modelPackage: Promise<ModelPackage>, sizes: WarmupSizes, { signal, awaitNextFrame, }: WarmupArgs | undefined, internalArgs: {
    signal: AbortSignal;
}) => Promise<void>;
//# sourceMappingURL=warmup.d.ts.map