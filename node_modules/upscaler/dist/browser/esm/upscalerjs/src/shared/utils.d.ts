import type { Tensor } from '@tensorflow/tfjs-core';
import type { Progress, SingleArgProgress, ResultFormat, MultiArgTensorProgress } from './types';
import type { ProcessFn, TF } from '../../../shared/src/types';
import { ModelDefinitionValidationError } from '../../../shared/src/constants';
export declare const warn: (msg: string | string[]) => void;
export declare function isProgress(p: undefined | Progress): p is Progress;
export declare function isSingleArgProgress(p: Progress): p is SingleArgProgress;
export declare const isMultiArgTensorProgress: (p: Progress, output: ResultFormat, progressOutput: ResultFormat) => p is MultiArgTensorProgress;
export declare const isAborted: (abortSignal?: AbortSignal) => boolean;
type PostNext<T = unknown> = ((value: T) => (void | Promise<void>));
export declare function wrapGenerator<T = unknown, TReturn = any, TNext = unknown>(gen: Generator<T, TReturn, TNext> | AsyncGenerator<T, TReturn, TNext>, postNext?: PostNext<T>): Promise<TReturn>;
export declare function nonNullable<T>(value: T): value is NonNullable<T>;
export declare function processAndDisposeOfTensor<T extends Tensor>(tf: TF, tensor: T, ..._processFns: (ProcessFn<T> | undefined)[]): T;
export declare const errIsModelDefinitionValidationError: (err: unknown) => err is ModelDefinitionValidationError;
export {};
//# sourceMappingURL=utils.d.ts.map