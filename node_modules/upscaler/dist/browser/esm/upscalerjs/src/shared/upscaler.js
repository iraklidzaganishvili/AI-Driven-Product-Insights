import DefaultUpscalerModel from '@upscalerjs/default-model';
import { cancellableWarmup, } from './warmup';
import { cancellableUpscale, } from './upscale';
import { getModel, } from './model-utils';
const DEFAULT_MODEL = DefaultUpscalerModel;
export function getUpscaler({ tf, getUpscaleOptions, checkValidEnvironment, getImageAsTensor, tensorAsBase64, loadModel, }) {
    class Upscaler {
        _opts;
        _model;
        ready;
        _abortController = new AbortController();
        constructor(opts = {}) {
            this._opts = {
                ...opts,
            };
            this._model = loadModel(tf, getModel(tf, this._opts.model || DEFAULT_MODEL));
            this.ready = new Promise((resolve, reject) => {
                this._model.then(() => cancellableWarmup(tf, this._model, (this._opts.warmupSizes || []), undefined, {
                    signal: this._abortController.signal,
                })).then(resolve).catch(reject);
            });
        }
        async execute(image, options) {
            const internals = {
                checkValidEnvironment,
                getImageAsTensor,
                tensorAsBase64,
            };
            await this.ready;
            const modelPackage = await this._model;
            return cancellableUpscale(tf, image, getUpscaleOptions(options), {
                ...modelPackage,
                signal: this._abortController.signal,
            }, internals);
        }
        upscale = this.execute.bind(this);
        warmup = async (warmupSizes = [], options) => {
            await this.ready;
            return cancellableWarmup(tf, this._model, warmupSizes, options, {
                signal: this._abortController.signal,
            });
        };
        abort = () => {
            this._abortController.abort();
            this._abortController = new AbortController();
        };
        dispose = async () => {
            await this.ready;
            const { model, modelDefinition, } = await this._model;
            if (modelDefinition.teardown) {
                await modelDefinition.teardown(tf);
            }
            model.dispose();
        };
        getModel = () => this._model;
    }
    ;
    return Upscaler;
}
;
