import * as tf from '@tensorflow/tfjs-core';
import { Tensor } from '@tensorflow/tfjs-core';
import { DynamicShape4D, FixedShape4D, IsTensor, MODEL_DEFINITION_VALIDATION_CHECK_ERROR_TYPE, ModelDefinition, ModelType, Shape4D } from './types';
export declare const isShape4D: (shape?: unknown) => shape is Shape4D;
export declare const isFixedShape4D: (shape?: unknown) => shape is FixedShape4D;
export declare const isDynamicShape4D: (shape?: unknown) => shape is DynamicShape4D;
export declare function makeIsNDimensionalTensor<T extends Tensor>(rank: number): IsTensor<T>;
export declare const isFourDimensionalTensor: IsTensor<tf.Tensor4D>;
export declare const isThreeDimensionalTensor: IsTensor<tf.Tensor3D>;
export declare const isTensor: (input: unknown) => input is tf.Tensor<tf.Rank>;
export declare const isString: (el: unknown) => el is string;
export declare const isValidModelType: (modelType: unknown) => modelType is ModelType;
export declare class ModelDefinitionValidationError extends Error {
    type: MODEL_DEFINITION_VALIDATION_CHECK_ERROR_TYPE;
    constructor(type: MODEL_DEFINITION_VALIDATION_CHECK_ERROR_TYPE);
}
export declare const isValidModelDefinition: (modelDefinition?: ModelDefinition) => modelDefinition is ModelDefinition;
export declare const hasValidChannels: (tensor: tf.Tensor) => boolean;
export declare const isNumber: (el: unknown) => el is number;
export declare const isValidRange: (range: unknown) => range is Range;
//# sourceMappingURL=constants.d.ts.map