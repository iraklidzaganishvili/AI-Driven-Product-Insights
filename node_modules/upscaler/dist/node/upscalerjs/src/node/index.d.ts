import * as tf from '@tensorflow/tfjs-node';
export * from '../shared';
import { Input } from './image.node';
declare const Upscaler: {
    new (opts?: import("../shared").UpscalerOptions): {
        _opts: import("../shared").UpscalerOptions;
        _model: Promise<import("../shared").ModelPackage>;
        ready: Promise<void>;
        _abortController: AbortController;
        execute(image: Input, options: Omit<import("../shared").UpscaleArgs, "output" | "progress" | "progressOutput"> & {
            output: "tensor";
            progress?: import("../shared").MultiArgStringProgress | undefined;
            progressOutput: "base64";
        }): Promise<tf.Tensor3D>;
        execute(image: Input, options: Omit<import("../shared").UpscaleArgs, "output" | "progress" | "progressOutput"> & {
            output?: "base64" | undefined;
            progress?: import("../shared").MultiArgTensorProgress | undefined;
            progressOutput: "tensor";
        }): Promise<string>;
        execute(image: Input, options: Omit<import("../shared").UpscaleArgs, "output" | "progress" | "progressOutput"> & {
            output: "tensor";
            progress?: import("../shared").MultiArgTensorProgress | undefined;
            progressOutput?: unknown;
        }): Promise<tf.Tensor3D>;
        execute(image: Input, options: Omit<import("../shared").UpscaleArgs, "output" | "progress" | "progressOutput"> & {
            output?: "base64" | undefined;
            progress?: import("../shared").MultiArgStringProgress | undefined;
            progressOutput?: unknown;
        }): Promise<string>;
        execute(image: Input, options: Omit<import("../shared").UpscaleArgs, "output" | "progress" | "progressOutput"> & {
            output?: "base64" | "tensor" | undefined;
            progress?: import("../shared").MultiArgStringProgress | import("../shared").MultiArgTensorProgress | undefined;
            progressOutput?: unknown;
        }): Promise<string | tf.Tensor3D>;
        execute(image: Input): Promise<string>;
        upscale: {
            (image: Input, options: Omit<import("../shared").UpscaleArgs, "output" | "progress" | "progressOutput"> & {
                output: "tensor";
                progress?: import("../shared").MultiArgStringProgress | undefined;
                progressOutput: "base64";
            }): Promise<tf.Tensor3D>;
            (image: Input, options: Omit<import("../shared").UpscaleArgs, "output" | "progress" | "progressOutput"> & {
                output?: "base64" | undefined;
                progress?: import("../shared").MultiArgTensorProgress | undefined;
                progressOutput: "tensor";
            }): Promise<string>;
            (image: Input, options: Omit<import("../shared").UpscaleArgs, "output" | "progress" | "progressOutput"> & {
                output: "tensor";
                progress?: import("../shared").MultiArgTensorProgress | undefined;
                progressOutput?: unknown;
            }): Promise<tf.Tensor3D>;
            (image: Input, options: Omit<import("../shared").UpscaleArgs, "output" | "progress" | "progressOutput"> & {
                output?: "base64" | undefined;
                progress?: import("../shared").MultiArgStringProgress | undefined;
                progressOutput?: unknown;
            }): Promise<string>;
            (image: Input, options: Omit<import("../shared").UpscaleArgs, "output" | "progress" | "progressOutput"> & {
                output?: "base64" | "tensor" | undefined;
                progress?: import("../shared").MultiArgStringProgress | import("../shared").MultiArgTensorProgress | undefined;
                progressOutput?: unknown;
            }): Promise<string | tf.Tensor3D>;
            (image: Input): Promise<string>;
        };
        warmup: (warmupSizes?: import("../shared").WarmupSizes, options?: import("../shared").WarmupArgs | undefined) => Promise<void>;
        abort: () => void;
        dispose: () => Promise<void>;
        getModel: () => Promise<import("../shared").ModelPackage>;
    };
};
export default Upscaler;
//# sourceMappingURL=index.d.ts.map