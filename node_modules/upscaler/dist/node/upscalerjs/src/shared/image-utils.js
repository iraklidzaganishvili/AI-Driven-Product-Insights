"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getPatchesFromImage = void 0;
var get1DPatch = function (total, idx, patchSize, padding) {
    var preOrigin = idx;
    var prePadding = idx === 0 ? 0 : patchSize === total ? 0 : padding;
    var isBeyondBounds = preOrigin + patchSize > total;
    var postOrigin = isBeyondBounds ? patchSize - (total - preOrigin) : 0;
    var postPadding = isBeyondBounds ? 0 : patchSize === total ? 0 : padding;
    var prePaddingAdjusted = isBeyondBounds ? 0 : prePadding;
    var postSize = patchSize - (isBeyondBounds ? postOrigin : 0);
    if (isBeyondBounds) {
        preOrigin = total - patchSize;
    }
    preOrigin -= prePaddingAdjusted;
    postOrigin += prePaddingAdjusted;
    postSize -= prePaddingAdjusted + postPadding;
    var increment = patchSize > total ? total : patchSize - prePadding - postPadding;
    return {
        pre: {
            origin: preOrigin,
            size: patchSize,
        },
        post: {
            origin: postOrigin,
            size: postSize,
        },
        increment: increment,
    };
};
var getPatchesFromImage = function (_a, patchSize, padding) {
    var width = _a[0], height = _a[1];
    var patches = [];
    var x = 0;
    var y = 0;
    while (y < height) {
        var _b = get1DPatch(height, y, Math.min(patchSize, height), padding), _c = _b.pre, preOriginY = _c.origin, preSizeY = _c.size, _d = _b.post, postOriginY = _d.origin, postSizeY = _d.size, yIncrement = _b.increment;
        var row = [];
        while (x < width) {
            var _e = get1DPatch(width, x, Math.min(patchSize, width), padding), _f = _e.pre, preOriginX = _f.origin, preSizeX = _f.size, _g = _e.post, postOriginX = _g.origin, postSizeX = _g.size, xIncrement = _e.increment;
            row.push({
                pre: {
                    origin: [preOriginY, preOriginX,],
                    size: [preSizeY, preSizeX,],
                },
                post: {
                    origin: [postOriginY, postOriginX,],
                    size: [postSizeY, postSizeX,],
                },
            });
            x += xIncrement;
        }
        patches.push(row);
        x = 0;
        y += yIncrement;
    }
    return patches;
};
exports.getPatchesFromImage = getPatchesFromImage;
