"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.parsePatchAndInputShapes = exports.getPatchSizeAsMultiple = exports.getModelInputShape = exports.loadTfModel = exports.getModel = exports.getModelDefinitionOrModelDefinitionFnAsModelDefinition = exports.isModelDefinitionFn = exports.parseModelDefinition = void 0;
var isLayersModel_1 = require("./isLayersModel");
var errors_and_warnings_1 = require("./errors-and-warnings");
var constants_1 = require("../../../shared/src/constants");
var utils_1 = require("./utils");
var parseModelDefinition = function (modelDefinition) { return (__assign({}, modelDefinition)); };
exports.parseModelDefinition = parseModelDefinition;
function isModelDefinitionFn(modelDefinition) { return typeof modelDefinition === 'function'; }
exports.isModelDefinitionFn = isModelDefinitionFn;
function getModelDefinitionOrModelDefinitionFnAsModelDefinition(tf, modelDefinition) {
    if (isModelDefinitionFn(modelDefinition)) {
        (0, utils_1.warn)(errors_and_warnings_1.WARNING_DEPRECATED_MODEL_DEFINITION_FN);
        return modelDefinition(tf);
    }
    return modelDefinition;
}
exports.getModelDefinitionOrModelDefinitionFnAsModelDefinition = getModelDefinitionOrModelDefinitionFnAsModelDefinition;
function getModel(tf, modelDefinition) {
    return __awaiter(this, void 0, void 0, function () {
        var modelDef;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    modelDef = getModelDefinitionOrModelDefinitionFnAsModelDefinition(tf, modelDefinition);
                    if (!modelDef.setup) return [3, 2];
                    return [4, modelDef.setup(tf)];
                case 1:
                    _a.sent();
                    _a.label = 2;
                case 2: return [2, modelDef];
            }
        });
    });
}
exports.getModel = getModel;
function loadTfModel(tf, modelPath, modelType) {
    if (modelType === 'graph') {
        return tf.loadGraphModel(modelPath);
    }
    return tf.loadLayersModel(modelPath);
}
exports.loadTfModel = loadTfModel;
var getBatchInputShape = function (tf, model) {
    if ((0, isLayersModel_1.isLayersModel)(tf, model)) {
        return model.layers[0].batchInputShape;
    }
    return model.inputs[0].shape;
};
var getModelInputShape = function (tf, _a) {
    var model = _a.model;
    var batchInputShape = getBatchInputShape(tf, model);
    if (!(0, constants_1.isShape4D)(batchInputShape)) {
        throw new Error((0, errors_and_warnings_1.ERROR_WITH_MODEL_INPUT_SHAPE)(batchInputShape));
    }
    return batchInputShape;
};
exports.getModelInputShape = getModelInputShape;
var getPatchSizeAsMultiple = function (divisibilityFactor, patchSize) {
    return Math.ceil(patchSize / divisibilityFactor) * divisibilityFactor;
};
exports.getPatchSizeAsMultiple = getPatchSizeAsMultiple;
var parsePatchAndInputShapes = function (tf, modelPackage, _a, imageSize) {
    var patchSize = _a.patchSize, padding = _a.padding;
    var modelInputShape = (0, exports.getModelInputShape)(tf, modelPackage);
    if (patchSize !== undefined) {
        if (patchSize <= 0) {
            throw (0, errors_and_warnings_1.GET_INVALID_PATCH_SIZE)(patchSize);
        }
        if (padding !== undefined && padding * 2 >= patchSize) {
            throw (0, errors_and_warnings_1.GET_INVALID_PATCH_SIZE_AND_PADDING)(patchSize, padding);
        }
    }
    if ((0, constants_1.isFixedShape4D)(modelInputShape)) {
        if (patchSize !== undefined) {
            (0, utils_1.warn)(errors_and_warnings_1.WARNING_INPUT_SIZE_AND_PATCH_SIZE);
        }
        if (modelInputShape[1] !== modelInputShape[2]) {
            throw errors_and_warnings_1.MODEL_INPUT_SIZE_MUST_BE_SQUARE;
        }
        return {
            patchSize: modelInputShape[1],
            padding: padding,
            modelInputShape: modelInputShape,
        };
    }
    if (patchSize !== undefined && padding === undefined) {
        (0, utils_1.warn)(errors_and_warnings_1.WARNING_UNDEFINED_PADDING);
    }
    var divisibilityFactor = modelPackage.modelDefinition.divisibilityFactor;
    if (divisibilityFactor !== undefined) {
        if (patchSize !== undefined) {
            var multipliedPatchSize = (0, exports.getPatchSizeAsMultiple)(divisibilityFactor, patchSize);
            if (multipliedPatchSize !== patchSize) {
                (0, utils_1.warn)((0, errors_and_warnings_1.GET_WARNING_PATCH_SIZE_INDIVISIBLE_BY_DIVISIBILITY_FACTOR)(patchSize, divisibilityFactor, multipliedPatchSize));
            }
            return {
                patchSize: multipliedPatchSize,
                padding: padding,
                modelInputShape: [null, multipliedPatchSize, multipliedPatchSize, 3,],
            };
        }
        return {
            patchSize: undefined,
            padding: undefined,
            modelInputShape: [
                null,
                (0, exports.getPatchSizeAsMultiple)(divisibilityFactor, imageSize[1]),
                (0, exports.getPatchSizeAsMultiple)(divisibilityFactor, imageSize[2]),
                3,
            ],
        };
    }
    return {
        patchSize: patchSize,
        padding: padding,
        modelInputShape: undefined,
    };
};
exports.parsePatchAndInputShapes = parsePatchAndInputShapes;
