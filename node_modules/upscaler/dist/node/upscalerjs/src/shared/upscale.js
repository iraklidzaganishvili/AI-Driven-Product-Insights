"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }
var __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.cancellableUpscale = exports.upscale = exports.processPixels = exports.executeModel = exports.getPercentageComplete = void 0;
var utils_1 = require("./utils");
var model_utils_1 = require("./model-utils");
var tensor_utils_1 = require("./tensor-utils");
var constants_1 = require("../../../shared/src/constants");
var makeTick_1 = require("./makeTick");
var errors_and_warnings_1 = require("./errors-and-warnings");
var image_utils_1 = require("./image-utils");
var getPercentageComplete = function (row, col, columns, total) {
    var index = row * columns + col + 1;
    var percent = index / total;
    return percent;
};
exports.getPercentageComplete = getPercentageComplete;
var executeModel = function (model, pixels) {
    var predictedPixels = model.predict(pixels);
    if (!(0, constants_1.isTensor)(predictedPixels)) {
        throw new Error(errors_and_warnings_1.ERROR_INVALID_MODEL_PREDICTION);
    }
    if ((0, constants_1.isFourDimensionalTensor)(predictedPixels)) {
        return predictedPixels;
    }
    throw new Error((0, errors_and_warnings_1.ERROR_INVALID_TENSOR_PREDICTED)(predictedPixels.shape));
};
exports.executeModel = executeModel;
function processPixels(tf, pixels, _a, modelPackage, _b, _c) {
    var _d;
    var output = _a.output, progress = _a.progress, progressOutput = _a.progressOutput;
    var originalImageSize = _b.originalImageSize, patchSize = _b.patchSize, _e = _b.padding, padding = _e === void 0 ? 0 : _e;
    var tensorAsBase64 = _c.tensorAsBase64;
    return __asyncGenerator(this, arguments, function processPixels_1() {
        var model, modelDefinition, scale, _f, height, width, patches, upscaledTensor, total, rowIdx, row, columns, colTensor, colIdx, _g, pre, post, slicedPixels, prediction_1, startSlice, endSlice, slicedPrediction, processedPrediction, percent, squeezedTensor_1, sliceData, src, processedUpscaledTensor, squeezedTensor_2, prediction, postprocessedTensor, squeezedTensor;
        return __generator(this, function (_h) {
            switch (_h.label) {
                case 0:
                    model = modelPackage.model, modelDefinition = modelPackage.modelDefinition;
                    scale = (_d = modelDefinition.scale) !== null && _d !== void 0 ? _d : 1;
                    if (!patchSize) return [3, 30];
                    _f = pixels.shape.slice(1), height = _f[0], width = _f[1];
                    patches = (0, image_utils_1.getPatchesFromImage)([width, height,], patchSize, padding);
                    return [4, __await(void 0)];
                case 1: return [4, _h.sent()];
                case 2:
                    _h.sent();
                    upscaledTensor = void 0;
                    total = patches.length * patches[0].length;
                    rowIdx = 0;
                    _h.label = 3;
                case 3:
                    if (!(rowIdx < patches.length)) return [3, 26];
                    row = patches[rowIdx];
                    columns = row.length;
                    colTensor = void 0;
                    return [4, __await([colTensor, upscaledTensor,])];
                case 4: return [4, _h.sent()];
                case 5:
                    _h.sent();
                    colIdx = 0;
                    _h.label = 6;
                case 6:
                    if (!(colIdx < columns)) return [3, 22];
                    _g = row[colIdx], pre = _g.pre, post = _g.post;
                    return [4, __await([upscaledTensor, colTensor,])];
                case 7: return [4, _h.sent()];
                case 8:
                    _h.sent();
                    slicedPixels = pixels.slice(__spreadArray([0], pre.origin, true), __spreadArray([-1], pre.size, true));
                    return [4, __await([upscaledTensor, colTensor, slicedPixels,])];
                case 9: return [4, _h.sent()];
                case 10:
                    _h.sent();
                    prediction_1 = (0, exports.executeModel)(model, slicedPixels);
                    slicedPixels.dispose();
                    return [4, __await([upscaledTensor, colTensor, prediction_1,])];
                case 11: return [4, _h.sent()];
                case 12:
                    _h.sent();
                    startSlice = [0, post.origin[0] * scale, post.origin[1] * scale,];
                    endSlice = [-1, post.size[0] * scale, post.size[1] * scale,];
                    slicedPrediction = prediction_1.slice(startSlice, endSlice);
                    prediction_1.dispose();
                    return [4, __await([upscaledTensor, colTensor, slicedPrediction,])];
                case 13: return [4, _h.sent()];
                case 14:
                    _h.sent();
                    processedPrediction = (0, utils_1.processAndDisposeOfTensor)(tf, slicedPrediction, modelDefinition.postprocess, (0, tensor_utils_1.scaleOutput)(modelDefinition.outputRange));
                    return [4, __await([upscaledTensor, colTensor, processedPrediction,])];
                case 15: return [4, _h.sent()];
                case 16:
                    _h.sent();
                    if (progress !== undefined && (0, utils_1.isProgress)(progress)) {
                        percent = (0, exports.getPercentageComplete)(rowIdx, colIdx, columns, total);
                        if ((0, utils_1.isSingleArgProgress)(progress)) {
                            progress(percent);
                        }
                        else {
                            squeezedTensor_1 = processedPrediction.squeeze();
                            sliceData = {
                                row: rowIdx,
                                col: colIdx,
                                patchCoordinates: {
                                    pre: pre,
                                    post: post,
                                },
                            };
                            if ((0, utils_1.isMultiArgTensorProgress)(progress, output, progressOutput)) {
                                progress(percent, squeezedTensor_1, sliceData);
                            }
                            else {
                                src = tensorAsBase64(tf, squeezedTensor_1);
                                squeezedTensor_1.dispose();
                                progress(percent, src, sliceData);
                            }
                        }
                    }
                    return [4, __await([upscaledTensor, colTensor, processedPrediction,])];
                case 17: return [4, _h.sent()];
                case 18:
                    _h.sent();
                    colTensor = (0, tensor_utils_1.concatTensors)(tf, [colTensor, processedPrediction,], 2);
                    processedPrediction.dispose();
                    return [4, __await([upscaledTensor, colTensor,])];
                case 19: return [4, _h.sent()];
                case 20:
                    _h.sent();
                    _h.label = 21;
                case 21:
                    colIdx++;
                    return [3, 6];
                case 22:
                    upscaledTensor = (0, tensor_utils_1.concatTensors)(tf, [upscaledTensor, colTensor,], 1);
                    colTensor.dispose();
                    return [4, __await([upscaledTensor,])];
                case 23: return [4, _h.sent()];
                case 24:
                    _h.sent();
                    _h.label = 25;
                case 25:
                    rowIdx++;
                    return [3, 3];
                case 26:
                    processedUpscaledTensor = (0, utils_1.processAndDisposeOfTensor)(tf, upscaledTensor.clone(), (0, tensor_utils_1.trimInput)(tf, originalImageSize, scale));
                    upscaledTensor === null || upscaledTensor === void 0 ? void 0 : upscaledTensor.dispose();
                    return [4, __await([processedUpscaledTensor,])];
                case 27: return [4, _h.sent()];
                case 28:
                    _h.sent();
                    squeezedTensor_2 = processedUpscaledTensor.squeeze();
                    processedUpscaledTensor.dispose();
                    return [4, __await(squeezedTensor_2)];
                case 29: return [2, _h.sent()];
                case 30:
                    if (progress) {
                        (0, utils_1.warn)(errors_and_warnings_1.WARNING_PROGRESS_WITHOUT_PATCH_SIZE);
                    }
                    prediction = (0, exports.executeModel)(model, pixels);
                    return [4, __await([prediction,])];
                case 31: return [4, _h.sent()];
                case 32:
                    _h.sent();
                    postprocessedTensor = (0, utils_1.processAndDisposeOfTensor)(tf, prediction.clone(), modelDefinition.postprocess, (0, tensor_utils_1.scaleOutput)(modelDefinition.outputRange), (0, tensor_utils_1.trimInput)(tf, originalImageSize, scale));
                    prediction.dispose();
                    return [4, __await([postprocessedTensor,])];
                case 33: return [4, _h.sent()];
                case 34:
                    _h.sent();
                    squeezedTensor = postprocessedTensor.squeeze();
                    postprocessedTensor.dispose();
                    return [4, __await(squeezedTensor)];
                case 35: return [2, _h.sent()];
            }
        });
    });
}
exports.processPixels = processPixels;
function upscale(tf, input, args, modelPackage, _a) {
    var getImageAsTensor = _a.getImageAsTensor, tensorAsBase64 = _a.tensorAsBase64;
    return __asyncGenerator(this, arguments, function upscale_1() {
        var parsedInput, startingPixels, imageSize, _b, patchSize, padding, modelInputShape, preprocessedPixels, gen, result, upscaledPixels, base64Src;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    parsedInput = (0, tensor_utils_1.getCopyOfInput)(input);
                    return [4, __await(getImageAsTensor(tf, parsedInput))];
                case 1:
                    startingPixels = _c.sent();
                    return [4, __await(startingPixels)];
                case 2: return [4, _c.sent()];
                case 3:
                    _c.sent();
                    imageSize = startingPixels.shape;
                    _b = (0, model_utils_1.parsePatchAndInputShapes)(tf, modelPackage, args, imageSize), patchSize = _b.patchSize, padding = _b.padding, modelInputShape = _b.modelInputShape;
                    preprocessedPixels = (0, utils_1.processAndDisposeOfTensor)(tf, startingPixels, modelPackage.modelDefinition.preprocess, (0, tensor_utils_1.scaleIncomingPixels)(tf, modelPackage.modelDefinition.inputRange), modelInputShape ? (0, tensor_utils_1.padInput)(tf, modelInputShape) : undefined);
                    return [4, __await(preprocessedPixels)];
                case 4: return [4, _c.sent()];
                case 5:
                    _c.sent();
                    gen = processPixels(tf, preprocessedPixels, {
                        output: args.output,
                        progressOutput: args.progressOutput,
                        progress: args.progress,
                    }, modelPackage, {
                        originalImageSize: imageSize,
                        patchSize: patchSize,
                        padding: padding,
                    }, {
                        tensorAsBase64: tensorAsBase64,
                    });
                    return [4, __await(gen.next())];
                case 6:
                    result = _c.sent();
                    return [4, __await(result.value)];
                case 7: return [4, _c.sent()];
                case 8:
                    _c.sent();
                    _c.label = 9;
                case 9:
                    if (!!result.done) return [3, 20];
                    return [4, __await(gen.next())];
                case 10:
                    result = _c.sent();
                    if (!Array.isArray(result.value)) return [3, 13];
                    return [4, __await(__spreadArray(__spreadArray([], result.value, true), [preprocessedPixels,], false))];
                case 11: return [4, _c.sent()];
                case 12:
                    _c.sent();
                    return [3, 19];
                case 13:
                    if (!(0, constants_1.isTensor)(result.value)) return [3, 16];
                    return [4, __await([result.value, preprocessedPixels,])];
                case 14: return [4, _c.sent()];
                case 15:
                    _c.sent();
                    return [3, 19];
                case 16: return [4, __await(preprocessedPixels)];
                case 17: return [4, _c.sent()];
                case 18:
                    _c.sent();
                    _c.label = 19;
                case 19: return [3, 9];
                case 20:
                    preprocessedPixels.dispose();
                    upscaledPixels = result.value;
                    if (!(args.output === 'tensor')) return [3, 22];
                    return [4, __await(upscaledPixels)];
                case 21: return [2, _c.sent()];
                case 22:
                    base64Src = tensorAsBase64(tf, upscaledPixels);
                    upscaledPixels.dispose();
                    return [4, __await(base64Src)];
                case 23: return [2, _c.sent()];
            }
        });
    });
}
exports.upscale = upscale;
;
function cancellableUpscale(tf, input, _a, internalArgs, _b) {
    var signal = _a.signal, awaitNextFrame = _a.awaitNextFrame, args = __rest(_a, ["signal", "awaitNextFrame"]);
    var checkValidEnvironment = _b.checkValidEnvironment, internalConfig = __rest(_b, ["checkValidEnvironment"]);
    return __awaiter(this, void 0, void 0, function () {
        var tick, upscaledPixels;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    checkValidEnvironment(input, {
                        output: args.output,
                        progressOutput: args.progressOutput,
                    });
                    tick = (0, makeTick_1.makeTick)(tf, signal || internalArgs.signal, awaitNextFrame);
                    return [4, tick()];
                case 1:
                    _c.sent();
                    return [4, (0, utils_1.wrapGenerator)(upscale(tf, input, args, internalArgs, internalConfig), tick)];
                case 2:
                    upscaledPixels = _c.sent();
                    return [4, tick()];
                case 3:
                    _c.sent();
                    return [2, upscaledPixels];
            }
        });
    });
}
exports.cancellableUpscale = cancellableUpscale;
